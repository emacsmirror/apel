-*- outline -*-

[APEL の README (日本語版)]

* APEL とは？

APEL は "A Portable Emacs Library." の略です。これは以下のモジュールで
構成されています:

** poe.el

主に最新の emacs 環境のための基礎的な関数と特殊形式/マクロの emulation
のモジュール。

  poe-xemacs.el  --- XEmacs用
  pym.el         --- poe のための macros

** poem.el

移植性の高い MULE プログラムを書くための基礎的な関数を提供する。

  poem-ltn1.el   --- MULE なし Emacs 19/XEmacs 用
  poem-20.el     --- Emacs 20 と XEmacs-MULE の共有モジュール
  poem-e20_3.el  --- Emacs 20.3 用
  poem-xm.el     --- XEmacs-MULE 用

** pces.el

移植性の高い character encoding スキーム (coding-system) を提供する。

  pces-20.el     --- coding-system 機能を持つ Emacs 20 and XEmacs 用
  pces-e20.el    --- Emacs 20 用
  pces-raw.el    --- coding-system 機能を持たない emacsen 用
  pces-xfc.el    --- file coding 機能を持つ XEmacs 用
  pces-xm.el     --- XEmacs-mule 用

** invisible.el --- 不可視 region に関する機能を提供する

  inv-19.el     --- for Emacs 19
  inv-23.el     --- for Emacs 23
  inv-xemacs.el --- for XEmacs

** mcharset.el --- MIME charset 関連の機能を提供する

  mcs-ltn1.el   --- MULE Emacs 19/XEmacs 用
  mcs-20.el     --- Emacs 20 と XEmacs-MULE 用の共有モジュール
  mcs-e20.el    --- Emacs 20 用
  mcs-xm.el     --- XEmacs-MULE 用
  mcs-xmu.el    --- XEmacs-MULE 用 (ISO646 文字の単一化)

** static.el --- 静的評価のためのユーティリティー

** broken.el --- Emacs の壊れている機能の情報を提供する

** pccl.el --- 移植可能な CCL プログラムを書くためのユーティリティー

  pccl-20.el --- Emacs 20/XEmacs-21-MULE 用

** alist.el: 連想リストのためのユーティリティー

** calist.el: 状態木と状態/状況連想リスト用のユーティリティー

** path-util.el: パス管理とファイル探索のためのユーティリティー

** filename.el:ファイル名を作るためのユーティリティ

** mule-caesar.el: ROT 13-47-48 Caesar 変換のユーティリティー

** emu.el

tm-7.106 に入っていた emu との互換性を保つためのモジュール。poe, poem,
mcharset を require する。

  richtext.el   --- Emacs 19.29 かそれ以降 XEmacs 19.14 かそれ以降のた
                    めの text/richtext モジュール

** pcustom.el --- 移植性の高い custom 環境を提供する

** product.el --- プロダクトのバージョン情報のための機能を提供するモジュール。


* インストール

Apel is available from Melpa.  Use package.el to install it.


* 使い方

** alist

*** 関数 put-alist (ITEM VALUE ALIST)

ALIST を ITEM の値が VALUE になるように修正します。car が ITEM であ
る対が存在すれば、その cdr を VALUE で置き換えます。そのような対がな
ければ、新しい対 (ITEM . VALUE) を作り、car が新しい対で、cdr が
ALIST である新しい連想リストを返します。

*** 関数 del-alist (ITEM ALIST)

連想リスト ALIST に key が ITEM である対があれば、それを ALIST から取
り除きます。

*** 関数 set-alist (SYMBOL ITEM VALUE)

SYMBOL で指定されている連想リストを、ITEM の値が VALUE であるように修
正します。

  例. (set-alist 'auto-mode-alist "\\.pln$" 'text-mode)

*** 関数 modify-alist (MODIFIER DEFAULT)

連想リスト DEFAULT を連想リスト MODIFIER に修正します。

*** 関数 set-modified-alist (SYMBOL MODIFIER)

SYMBOL の値を連想リスト MODIFIER に修正します。SYMBOL は連想リストであ
る必要があります。それが束縛されていなければ、その値を nil とみなしま
す。

** path-util

*** 関数 add-path (PATH &rest OPTIONS)

PATH が `default-load-path' のディレクトリーの下に存在して、
`load-path'に存在しないときに、それを `load-path' に追加します。

次のような PATH の様式を使うことができます:

  load-path からの相対: "PATH" (それは `default-load-path から探されま
                        す。)

  ホームディレクトリーからの相対: "~/PATH" "~USER/PATH"

  絶対パス: "/FOO/BAR/BAZ"

次のような OPTIONS を指定することができます:

  'all-paths --- `default-load-path の代わり `load-path' から探しま
	           す。

  'append --- PATH を `load-path' の最後に追加します。

*** 関数 add-latest-path (PATTERN &optional ALL-PATHS)

正規表現 PATTERN に合致した最新のパスが `default-load-path' の下に存在
していて、`load-path' の下に存在していないときにそれを `load-path' に
追加します。

例えば、bbdb-1.50 と bbdb-1.51 が site-lisp の下にあって、bbdb-1.51 が
bbdb-1.50 よりも新しく、site-lisp が /usr/local/share/emacs/site-lisp
であるときは、

  (add-latest-path "bbdb")

は "/usr/local/share/emacs/site-lisp/bbdb-1.51" を `load-path' の先頭
に追加します。

省略可能な引数 ALL-PATHS が指定されると、`default-load-path' のかわり
に `load-path' から探します。

*** 関数 get-latest-path (PATTERN &optional ALL-PATHS)

正規表現 PATTERN に合致する default-load-path にある最新のディレクトリー
を返します。省略可能な引数 ALL-PATHS が指定されると、default-load-path
の代わりに load-path の全てから探します。

  例. (let ((gnus-path (get-latest-path "gnus")))
        (add-path (expand-file-name "lisp" gnus-path))
        (add-to-list 'Info-default-directory-list
		     (expand-file-name "texi" gnus-path)))

*** 関数 file-installed-p (FILE &optional PATHS)

FILE が PATHS に存在した場合、FILE の絶対パスを返します。PATHS が省略
されると、`load-path' が使われます。

*** 関数 exec-installed-p (FILE &optional PATHS SUFFIXES)

FILE が PATHS に存在した場合に FILE の絶対パスを返します。PATHS が省略
されると、`exec-path' が使われます。SUFFIXES が省略されると、
`exec-suffix-list' が使われます。

*** 関数 module-installed-p (MODULE &optional PATHS)

MODULE が提供されている (provided) か、PATHS に存在する場合に nil で
ない値を返します。PATHS が省略されると、`load-path' が使われます。

** filename

*** 関数 replace-as-filename (string)

STRING から安全なファイル名を返します。

それは変数 'filename-filters' を参照します。その変数はファイル名の選
別器のための関数のリストです。初期設定の選別器は以下の変数を参照してい
ます。

**** 変数 filename-limit-length

ファイル名の長さの制限。

**** 変数 filename-replacement-alist

文字と文字列が対になったリストの連想リストです。文字のリストはファイル
名として許されない文字を現わします。


* バグ報告

バグ報告や改善の提案を書いたときは、是非 APEL メーリングリストに送って
ください:

  apel-ja@lists.chise.org	（日本語）
  apel-en@lists.chise.org	（英語）

APEL ML を通して、APEL のバグを報告したり、APEL の最新のリリースを取得
したり、APEL の将来の拡張の議論をしたりすることができます。APEL ML に
参加するには、以下の頁の記述を見て手続きを行ってください：

  http://lists.chise.org/mailman/listinfo/apel-ja	（日本語）
  http://lists.chise.org/mailman/listinfo/apel-en	（英語）


* Download

最新の APEL のリリースは以下の場所から取得できます:

    http://git.chise.org/elisp/dist/apel/


* Git

APEL の開発には Git を使っています。最新の開発バージョンを以下の Gitリ
ポジトリーから取得できます。

  % git clone http://git.chise.org/git/elisp/apel.git

この APEL のリポジトリーは WWW 経由でも閲覧することができます：

    http://git.chise.org/gitweb/?p=elisp/apel.git

Git に基づいた開発に参加したいときは、APEL メーリングリストでその旨を
宣言してください。

我々は多くの方がこの開かれた開発に参加してくださることを望んでいます。
