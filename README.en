-*- outline -*-

[README for APEL (English Version)]

* What's APEL?

APEL stands for "A Portable Emacs Library".  It consists of following
modules:

**  poe.el

This is an emulation module mainly for basic functions and special
forms/macros of latest emacsen.

  poe-xemacs.el  --- for XEmacs
  pym.el         --- macros for poe.

** poem.el

This module provides basic functions to write portable MULE programs.

  poem-ltn1.el   --- for Emacs 19/XEmacs without MULE
  poem-20.el     --- shared module between Emacs 20 and XEmacs-MULE
  poem-e20_3.el  --- for Emacs 20.3
  poem-xm.el     --- for XEmacs-MULE

** pces.el

This module provides portable character encoding scheme
(coding-system) features.

  pces-20.el     --- for Emacs 20 and XEmacs with coding-system.
  pces-e20.el    --- for Emacs 20.
  pces-raw.el    --- for emacsen without coding-system features.
  pces-xfc.el    --- for XEmacs with file coding.
  pces-xm.el     --- for XEmacs-mule.

** invisible.el

This modules provides features about invisible region.

  inv-19.el     --- for Emacs 19
  inv-23.el     --- for Emacs 23
  inv-xemacs.el --- for XEmacs

** mcharset.el

This modules provides MIME charset related features.

  mcs-ltn1.el   --- for Emacs 19/XEmacs without MULE
  mcs-20.el     --- shared module between Emacs 20 and XEmacs-MULE
  mcs-e20.el    --- for Emacs 20
  mcs-xm.el     --- for XEmacs-MULE
  mcs-xmu.el    --- for XEmacs-MULE to unify ISO646 characters

** static.el --- utility for static evaluation

** broken.el --- provide information of broken facilities of Emacs

** pccl.el --- utility to write portable CCL program

  pccl-20.el --- for Emacs 20/XEmacs-21-MULE

** alist.el: utility for Association-list

** calist.el: utility for condition tree and condition/situation-alist

** path-util.el: utility for path management or file detection

** filename.el: utility to make file-name

** mule-caesar.el: ROT 13-47-48 Caesar rotation utility

** emu.el

This module provides emu bundled in tm-7.106 compatibility.  It
required poe, poem and mcharset.

  richtext.el   --- text/richtext module for Emacs 19.29 or later,
		     XEmacs 19.14 or later

** pcustom.el --- provide portable custom environment

** product.el --- Functions for product version information.


* Installation

Apel is available from Melpa.  Use package.el to install it.


* How to use

** alist

*** Function put-alist (ITEM VALUE ALIST)

Modify ALIST to set VALUE to ITEM.  If there is a pair whose car is
ITEM, replace its cdr by VALUE.  If there is not such pair, create
new pair (ITEM . VALUE) and return new alist whose car is the new
pair and cdr is ALIST.

*** Function del-alist (ITEM ALIST)

If there is a pair whose key is ITEM, delete it from ALIST.

*** Function set-alist (SYMBOL ITEM VALUE)

Modify a alist indicated by SYMBOL to set VALUE to ITEM.

  Ex. (set-alist 'auto-mode-alist "\\.pln$" 'text-mode)

*** Function modify-alist (MODIFIER DEFAULT)

Modify alist DEFAULT into alist MODIFIER.

*** Function set-modified-alist (SYMBOL MODIFIER)

Modify a value of a SYMBOL into alist MODIFIER.  The SYMBOL should be
alist. If it is not bound, its value regard as nil.

** path-util

*** Function add-path (PATH &rest OPTIONS)

Add PATH to `load-path' if it exists under `default-load-path'
directories and it does not exist in `load-path'.

You can use following PATH styles:

  load-path relative: "PATH" (it is searched from `default-load-path')

  home directory relative: "~/PATH" "~USER/PATH"

  absolute path: "/FOO/BAR/BAZ"

You can specify following OPTIONS:

  'all-paths --- search from `load-path' instead of
                 `default-load-path'

  'append --- add PATH to the last of `load-path'

*** Function add-latest-path (PATTERN &optional ALL-PATHS)

Add latest path matched by regexp PATTERN to `load-path' if it
exists under `default-load-path' directories and it does not exist
in `load-path'.

For example, if there is bbdb-1.50 and bbdb-1.51 under site-lisp,
and if bbdb-1.51 is newer than bbdb-1.50, and site-lisp is
/usr/local/share/emacs/site-lisp,

  (add-latest-path "bbdb")

it adds "/usr/local/share/emacs/site-lisp/bbdb-1.51" to top of
`load-path'.

If optional argument ALL-PATHS is specified, it is searched from all
of `load-path' instead of `default-load-path'.

*** Function get-latest-path (PATTERN &optional ALL-PATHS)

Return latest directory in default-load-path which is matched to
regexp PATTERN.  If optional argument ALL-PATHS is specified, it is
searched from all of load-path instead of default-load-path.

  Ex. (let ((gnus-path (get-latest-path "gnus")))
        (add-path (expand-file-name "lisp" gnus-path))
        (add-to-list 'Info-default-directory-list
		     (expand-file-name "texi" gnus-path)))

*** Function file-installed-p (FILE &optional PATHS)

Return absolute-path of FILE if FILE exists in PATHS.  If PATHS is
omitted, `load-path' is used.

*** Function exec-installed-p (FILE &optional PATHS SUFFIXES)

Return absolute-path of FILE if FILE exists in PATHS.  If PATHS is
omitted, `exec-path' is used.  If SUFFIXES is omitted,
`exec-suffix-list' is used.

*** Function module-installed-p (MODULE &optional PATHS)

Return non-nil if MODULE is provided or exists in PATHS.  If PATHS is
omitted, `load-path' is used.

** filename

*** Function replace-as-filename (string)

Return safety file-name from STRING.

It refers variable `filename-filters'.  It is list of functions for
file-name filter.  Default filter refers following variables:

**** Variable filename-limit-length

Limit size of file-name.

**** Variable filename-replacement-alist

Alist list of characters vs. string as replacement.  List of
characters represents characters not allowed as file-name.


* Bug reports

If you write bug-reports and/or suggestions for improvement, please
send them to the APEL Mailing List:

  apel-en@lists.chise.org	(English)
  apel-ja@lists.chise.org	(Japanese)

Via the APEL ML, you can report APEL bugs, obtain the latest release
of APEL, and discuss future enhancements to APEL.  To join the APEL
ML, please see the descriptions of the following pages:

  http://lists.chise.org/mailman/listinfo/apel-en	(English)
  http://lists.chise.org/mailman/listinfo/apel-ja	(Japanese)


* Download

The latest release of APEL can be obtained from:

    http://git.chise.org/elisp/dist/apel/


* Git

Development of APEL uses Git.  So the latest developing version is
available at the following Git repository:

  % git clone http://git.chise.org/git/elisp/apel.git

Or you can view the APEL repository via WWW at:

    http://git.chise.org/gitweb/?p=elisp/apel.git

If you would like to join Git based development, please declare it in
the APEL mailing list.

We hope you will join the open development.
